// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ezetap.proto

package com.eze.ezecli;

/**
 * Protobuf type {@code ezecli.SignatureInput}
 *
 * <pre>
 **
 * SignatureInput is a message representing the input for the signature API; This API is also used to accept 'Tip' for the transaction.
 * </pre>
 */
public final class SignatureInput extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ezecli.SignatureInput)
    SignatureInputOrBuilder {
  // Use SignatureInput.newBuilder() to construct.
  private SignatureInput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private SignatureInput(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final SignatureInput defaultInstance;
  public static SignatureInput getDefaultInstance() {
    return defaultInstance;
  }

  public SignatureInput getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  @SuppressWarnings("unused")
private SignatureInput(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000001;
            txnId_ = bs;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            com.eze.ezecli.SignatureInput.ImageType value = com.eze.ezecli.SignatureInput.ImageType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              imageType_ = value;
            }
            break;
          }
          case 26: {
            bitField0_ |= 0x00000004;
            imageBytes_ = input.readBytes();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            height_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            width_ = input.readInt32();
            break;
          }
          case 49: {
            bitField0_ |= 0x00000020;
            tipAmount_ = input.readDouble();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.eze.ezecli.Ezetap.internal_static_ezecli_SignatureInput_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.eze.ezecli.Ezetap.internal_static_ezecli_SignatureInput_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.eze.ezecli.SignatureInput.class, com.eze.ezecli.SignatureInput.Builder.class);
  }

  public static com.google.protobuf.Parser<SignatureInput> PARSER =
      new com.google.protobuf.AbstractParser<SignatureInput>() {
    public SignatureInput parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SignatureInput(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<SignatureInput> getParserForType() {
    return PARSER;
  }

  /**
   * Protobuf enum {@code ezecli.SignatureInput.ImageType}
   *
   * <pre>
   **
   * ImageType is an enum representing all the acceptable image types
   * </pre>
   */
  public enum ImageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PNG = 0;</code>
     *
     * <pre>
     *&#47; Type of th image is PNG
     * </pre>
     */
    PNG(0, 0),
    /**
     * <code>GIF = 1;</code>
     *
     * <pre>
     *&#47; Type of th image is GIF
     * </pre>
     */
    GIF(1, 1),
    /**
     * <code>JPEG = 2;</code>
     *
     * <pre>
     *&#47;Type of th image is JPEG
     * </pre>
     */
    JPEG(2, 2),
    /**
     * <code>BMP = 3;</code>
     *
     * <pre>
     *&#47;Type of th image is BMP
     * </pre>
     */
    BMP(3, 3),
    ;

    /**
     * <code>PNG = 0;</code>
     *
     * <pre>
     *&#47; Type of th image is PNG
     * </pre>
     */
    public static final int PNG_VALUE = 0;
    /**
     * <code>GIF = 1;</code>
     *
     * <pre>
     *&#47; Type of th image is GIF
     * </pre>
     */
    public static final int GIF_VALUE = 1;
    /**
     * <code>JPEG = 2;</code>
     *
     * <pre>
     *&#47;Type of th image is JPEG
     * </pre>
     */
    public static final int JPEG_VALUE = 2;
    /**
     * <code>BMP = 3;</code>
     *
     * <pre>
     *&#47;Type of th image is BMP
     * </pre>
     */
    public static final int BMP_VALUE = 3;


    public final int getNumber() { return value; }

    public static ImageType valueOf(int value) {
      switch (value) {
        case 0: return PNG;
        case 1: return GIF;
        case 2: return JPEG;
        case 3: return BMP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ImageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ImageType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ImageType>() {
            public ImageType findValueByNumber(int number) {
              return ImageType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eze.ezecli.SignatureInput.getDescriptor().getEnumTypes().get(0);
    }

    private static final ImageType[] VALUES = values();

    public static ImageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ImageType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ezecli.SignatureInput.ImageType)
  }

  private int bitField0_;
  public static final int TXNID_FIELD_NUMBER = 1;
  private java.lang.Object txnId_;
  /**
   * <code>required string txnId = 1;</code>
   *
   * <pre>
   *&#47;Id of the transaction you want to sign.
   * </pre>
   */
  public boolean hasTxnId() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required string txnId = 1;</code>
   *
   * <pre>
   *&#47;Id of the transaction you want to sign.
   * </pre>
   */
  public java.lang.String getTxnId() {
    java.lang.Object ref = txnId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        txnId_ = s;
      }
      return s;
    }
  }
  /**
   * <code>required string txnId = 1;</code>
   *
   * <pre>
   *&#47;Id of the transaction you want to sign.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getTxnIdBytes() {
    java.lang.Object ref = txnId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      txnId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IMAGETYPE_FIELD_NUMBER = 2;
  private com.eze.ezecli.SignatureInput.ImageType imageType_;
  /**
   * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
   *
   * <pre>
   *&#47;Type of the image captured by your application
   * </pre>
   */
  public boolean hasImageType() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
   *
   * <pre>
   *&#47;Type of the image captured by your application
   * </pre>
   */
  public com.eze.ezecli.SignatureInput.ImageType getImageType() {
    return imageType_;
  }

  public static final int IMAGEBYTES_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString imageBytes_;
  /**
   * <code>required bytes imageBytes = 3;</code>
   *
   * <pre>
   *&#47;Data of the image
   * </pre>
   */
  public boolean hasImageBytes() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>required bytes imageBytes = 3;</code>
   *
   * <pre>
   *&#47;Data of the image
   * </pre>
   */
  public com.google.protobuf.ByteString getImageBytes() {
    return imageBytes_;
  }

  public static final int HEIGHT_FIELD_NUMBER = 4;
  private int height_;
  /**
   * <code>optional int32 height = 4;</code>
   *
   * <pre>
   *&#47;Height of the image
   * </pre>
   */
  public boolean hasHeight() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int32 height = 4;</code>
   *
   * <pre>
   *&#47;Height of the image
   * </pre>
   */
  public int getHeight() {
    return height_;
  }

  public static final int WIDTH_FIELD_NUMBER = 5;
  private int width_;
  /**
   * <code>optional int32 width = 5;</code>
   *
   * <pre>
   *&#47;Width of the image
   * </pre>
   */
  public boolean hasWidth() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int32 width = 5;</code>
   *
   * <pre>
   *&#47;Width of the image
   * </pre>
   */
  public int getWidth() {
    return width_;
  }

  public static final int TIPAMOUNT_FIELD_NUMBER = 6;
  private double tipAmount_;
  /**
   * <code>optional double tipAmount = 6;</code>
   *
   * <pre>
   *&#47;Tip amount
   * </pre>
   */
  public boolean hasTipAmount() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional double tipAmount = 6;</code>
   *
   * <pre>
   *&#47;Tip amount
   * </pre>
   */
  public double getTipAmount() {
    return tipAmount_;
  }

  private void initFields() {
    txnId_ = "";
    imageType_ = com.eze.ezecli.SignatureInput.ImageType.PNG;
    imageBytes_ = com.google.protobuf.ByteString.EMPTY;
    height_ = 0;
    width_ = 0;
    tipAmount_ = 0D;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasTxnId()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasImageType()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasImageBytes()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBytes(1, getTxnIdBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, imageType_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBytes(3, imageBytes_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, height_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, width_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeDouble(6, tipAmount_);
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(1, getTxnIdBytes());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, imageType_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, imageBytes_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, height_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, width_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, tipAmount_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static com.eze.ezecli.SignatureInput parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.eze.ezecli.SignatureInput parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.eze.ezecli.SignatureInput parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.eze.ezecli.SignatureInput parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(com.eze.ezecli.SignatureInput prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ezecli.SignatureInput}
   *
   * <pre>
   **
   * SignatureInput is a message representing the input for the signature API; This API is also used to accept 'Tip' for the transaction.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ezecli.SignatureInput)
      com.eze.ezecli.SignatureInputOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_SignatureInput_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_SignatureInput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eze.ezecli.SignatureInput.class, com.eze.ezecli.SignatureInput.Builder.class);
    }

    // Construct using com.eze.ezecli.SignatureInput.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      txnId_ = "";
      bitField0_ = (bitField0_ & ~0x00000001);
      imageType_ = com.eze.ezecli.SignatureInput.ImageType.PNG;
      bitField0_ = (bitField0_ & ~0x00000002);
      imageBytes_ = com.google.protobuf.ByteString.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      height_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      width_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      tipAmount_ = 0D;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_SignatureInput_descriptor;
    }

    public com.eze.ezecli.SignatureInput getDefaultInstanceForType() {
      return com.eze.ezecli.SignatureInput.getDefaultInstance();
    }

    public com.eze.ezecli.SignatureInput build() {
      com.eze.ezecli.SignatureInput result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.eze.ezecli.SignatureInput buildPartial() {
      com.eze.ezecli.SignatureInput result = new com.eze.ezecli.SignatureInput(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.txnId_ = txnId_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.imageType_ = imageType_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.imageBytes_ = imageBytes_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.height_ = height_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.width_ = width_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.tipAmount_ = tipAmount_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.eze.ezecli.SignatureInput) {
        return mergeFrom((com.eze.ezecli.SignatureInput)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.eze.ezecli.SignatureInput other) {
      if (other == com.eze.ezecli.SignatureInput.getDefaultInstance()) return this;
      if (other.hasTxnId()) {
        bitField0_ |= 0x00000001;
        txnId_ = other.txnId_;
        onChanged();
      }
      if (other.hasImageType()) {
        setImageType(other.getImageType());
      }
      if (other.hasImageBytes()) {
        setImageBytes(other.getImageBytes());
      }
      if (other.hasHeight()) {
        setHeight(other.getHeight());
      }
      if (other.hasWidth()) {
        setWidth(other.getWidth());
      }
      if (other.hasTipAmount()) {
        setTipAmount(other.getTipAmount());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasTxnId()) {
        
        return false;
      }
      if (!hasImageType()) {
        
        return false;
      }
      if (!hasImageBytes()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.eze.ezecli.SignatureInput parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.eze.ezecli.SignatureInput) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object txnId_ = "";
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public boolean hasTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public java.lang.String getTxnId() {
      java.lang.Object ref = txnId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          txnId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTxnIdBytes() {
      java.lang.Object ref = txnId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        txnId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public Builder setTxnId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      txnId_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public Builder clearTxnId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      txnId_ = getDefaultInstance().getTxnId();
      onChanged();
      return this;
    }
    /**
     * <code>required string txnId = 1;</code>
     *
     * <pre>
     *&#47;Id of the transaction you want to sign.
     * </pre>
     */
    public Builder setTxnIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      txnId_ = value;
      onChanged();
      return this;
    }

    private com.eze.ezecli.SignatureInput.ImageType imageType_ = com.eze.ezecli.SignatureInput.ImageType.PNG;
    /**
     * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
     *
     * <pre>
     *&#47;Type of the image captured by your application
     * </pre>
     */
    public boolean hasImageType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
     *
     * <pre>
     *&#47;Type of the image captured by your application
     * </pre>
     */
    public com.eze.ezecli.SignatureInput.ImageType getImageType() {
      return imageType_;
    }
    /**
     * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
     *
     * <pre>
     *&#47;Type of the image captured by your application
     * </pre>
     */
    public Builder setImageType(com.eze.ezecli.SignatureInput.ImageType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      imageType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required .ezecli.SignatureInput.ImageType imageType = 2;</code>
     *
     * <pre>
     *&#47;Type of the image captured by your application
     * </pre>
     */
    public Builder clearImageType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      imageType_ = com.eze.ezecli.SignatureInput.ImageType.PNG;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString imageBytes_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>required bytes imageBytes = 3;</code>
     *
     * <pre>
     *&#47;Data of the image
     * </pre>
     */
    public boolean hasImageBytes() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes imageBytes = 3;</code>
     *
     * <pre>
     *&#47;Data of the image
     * </pre>
     */
    public com.google.protobuf.ByteString getImageBytes() {
      return imageBytes_;
    }
    /**
     * <code>required bytes imageBytes = 3;</code>
     *
     * <pre>
     *&#47;Data of the image
     * </pre>
     */
    public Builder setImageBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      imageBytes_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required bytes imageBytes = 3;</code>
     *
     * <pre>
     *&#47;Data of the image
     * </pre>
     */
    public Builder clearImageBytes() {
      bitField0_ = (bitField0_ & ~0x00000004);
      imageBytes_ = getDefaultInstance().getImageBytes();
      onChanged();
      return this;
    }

    private int height_ ;
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *&#47;Height of the image
     * </pre>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *&#47;Height of the image
     * </pre>
     */
    public int getHeight() {
      return height_;
    }
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *&#47;Height of the image
     * </pre>
     */
    public Builder setHeight(int value) {
      bitField0_ |= 0x00000008;
      height_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 height = 4;</code>
     *
     * <pre>
     *&#47;Height of the image
     * </pre>
     */
    public Builder clearHeight() {
      bitField0_ = (bitField0_ & ~0x00000008);
      height_ = 0;
      onChanged();
      return this;
    }

    private int width_ ;
    /**
     * <code>optional int32 width = 5;</code>
     *
     * <pre>
     *&#47;Width of the image
     * </pre>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 width = 5;</code>
     *
     * <pre>
     *&#47;Width of the image
     * </pre>
     */
    public int getWidth() {
      return width_;
    }
    /**
     * <code>optional int32 width = 5;</code>
     *
     * <pre>
     *&#47;Width of the image
     * </pre>
     */
    public Builder setWidth(int value) {
      bitField0_ |= 0x00000010;
      width_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 width = 5;</code>
     *
     * <pre>
     *&#47;Width of the image
     * </pre>
     */
    public Builder clearWidth() {
      bitField0_ = (bitField0_ & ~0x00000010);
      width_ = 0;
      onChanged();
      return this;
    }

    private double tipAmount_ ;
    /**
     * <code>optional double tipAmount = 6;</code>
     *
     * <pre>
     *&#47;Tip amount
     * </pre>
     */
    public boolean hasTipAmount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional double tipAmount = 6;</code>
     *
     * <pre>
     *&#47;Tip amount
     * </pre>
     */
    public double getTipAmount() {
      return tipAmount_;
    }
    /**
     * <code>optional double tipAmount = 6;</code>
     *
     * <pre>
     *&#47;Tip amount
     * </pre>
     */
    public Builder setTipAmount(double value) {
      bitField0_ |= 0x00000020;
      tipAmount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional double tipAmount = 6;</code>
     *
     * <pre>
     *&#47;Tip amount
     * </pre>
     */
    public Builder clearTipAmount() {
      bitField0_ = (bitField0_ & ~0x00000020);
      tipAmount_ = 0D;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:ezecli.SignatureInput)
  }

  static {
    defaultInstance = new SignatureInput(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:ezecli.SignatureInput)
}

