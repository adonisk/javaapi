// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ezetap.proto

package com.eze.ezecli;

/**
 * Protobuf type {@code ezecli.ApiOutput}
 *
 * <pre>
 **
 * ApiOutput is a message representing the API output from the ezecli app
 * </pre>
 */
public final class ApiOutput extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:ezecli.ApiOutput)
    ApiOutputOrBuilder {
  // Use ApiOutput.newBuilder() to construct.
  private ApiOutput(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
    this.unknownFields = builder.getUnknownFields();
  }
  private ApiOutput(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

  private static final ApiOutput defaultInstance;
  public static ApiOutput getDefaultInstance() {
    return defaultInstance;
  }

  public ApiOutput getDefaultInstanceForType() {
    return defaultInstance;
  }

  private final com.google.protobuf.UnknownFieldSet unknownFields;
  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
    return this.unknownFields;
  }
  private ApiOutput(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    initFields();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            com.eze.ezecli.ApiOutput.EventType value = com.eze.ezecli.ApiOutput.EventType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              eventType_ = value;
            }
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            com.eze.ezecli.ApiOutput.ResultStatus value = com.eze.ezecli.ApiOutput.ResultStatus.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(2, rawValue);
            } else {
              bitField0_ |= 0x00000002;
              status_ = value;
            }
            break;
          }
          case 26: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000004;
            msgText_ = bs;
            break;
          }
          case 34: {
            bitField0_ |= 0x00000008;
            outData_ = input.readBytes();
            break;
          }
          case 40: {
            int rawValue = input.readEnum();
            com.eze.ezecli.ApiOutput.NotificationType value = com.eze.ezecli.ApiOutput.NotificationType.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(5, rawValue);
            } else {
              bitField0_ |= 0x00000010;
              notification_ = value;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e.getMessage()).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.eze.ezecli.Ezetap.internal_static_ezecli_ApiOutput_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.eze.ezecli.Ezetap.internal_static_ezecli_ApiOutput_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.eze.ezecli.ApiOutput.class, com.eze.ezecli.ApiOutput.Builder.class);
  }

  public static com.google.protobuf.Parser<ApiOutput> PARSER =
      new com.google.protobuf.AbstractParser<ApiOutput>() {
    public ApiOutput parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ApiOutput(input, extensionRegistry);
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<ApiOutput> getParserForType() {
    return PARSER;
  }

  /**
   * Protobuf enum {@code ezecli.ApiOutput.ResultStatus}
   *
   * <pre>
   **
   * ResultStatus is an enum representing the status of the API operation
   * </pre>
   */
  public enum ResultStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SUCCESS = 0;</code>
     *
     * <pre>
     *&#47; API result is success
     * </pre>
     */
    SUCCESS(0, 0),
    /**
     * <code>FAILURE = 1;</code>
     *
     * <pre>
     *&#47; API result is failure
     * </pre>
     */
    FAILURE(1, 1),
    ;

    /**
     * <code>SUCCESS = 0;</code>
     *
     * <pre>
     *&#47; API result is success
     * </pre>
     */
    public static final int SUCCESS_VALUE = 0;
    /**
     * <code>FAILURE = 1;</code>
     *
     * <pre>
     *&#47; API result is failure
     * </pre>
     */
    public static final int FAILURE_VALUE = 1;


    public final int getNumber() { return value; }

    public static ResultStatus valueOf(int value) {
      switch (value) {
        case 0: return SUCCESS;
        case 1: return FAILURE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ResultStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ResultStatus>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResultStatus>() {
            public ResultStatus findValueByNumber(int number) {
              return ResultStatus.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eze.ezecli.ApiOutput.getDescriptor().getEnumTypes().get(0);
    }

    private static final ResultStatus[] VALUES = values();

    public static ResultStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ResultStatus(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ezecli.ApiOutput.ResultStatus)
  }

  /**
   * Protobuf enum {@code ezecli.ApiOutput.EventType}
   *
   * <pre>
   **
   * EventType is an enum representing all result events for APIs
   * </pre>
   */
  public enum EventType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>LOGIN_RESULT = 0;</code>
     *
     * <pre>
     *&#47; Result Event for login api
     * </pre>
     */
    LOGIN_RESULT(0, 0),
    /**
     * <code>LOGOUT_RESULT = 1;</code>
     *
     * <pre>
     *&#47; Result Event for logout api
     * </pre>
     */
    LOGOUT_RESULT(1, 1),
    /**
     * <code>TXN_RESULT = 2;</code>
     *
     * <pre>
     *&#47; Result Event for transaction api
     * </pre>
     */
    TXN_RESULT(2, 2),
    /**
     * <code>PREPARE_DEVICE_RESULT = 3;</code>
     *
     * <pre>
     *&#47; Result Event for prepare device api
     * </pre>
     */
    PREPARE_DEVICE_RESULT(3, 3),
    /**
     * <code>ATTACH_SIGNATURE_RESULT = 4;</code>
     *
     * <pre>
     *&#47; Result Event for attach signature api
     * </pre>
     */
    ATTACH_SIGNATURE_RESULT(4, 4),
    /**
     * <code>TXN_HISTORY_RESULT = 5;</code>
     *
     * <pre>
     *&#47; Result Event for transaction history api
     * </pre>
     */
    TXN_HISTORY_RESULT(5, 5),
    /**
     * <code>VOID_TXN_RESULT = 6;</code>
     *
     * <pre>
     *&#47; Result Event for void transaction api
     * </pre>
     */
    VOID_TXN_RESULT(6, 6),
    /**
     * <code>FORWARD_RECEIPT_RESULT = 7;</code>
     *
     * <pre>
     *&#47; Result Event for forward receipt api
     * </pre>
     */
    FORWARD_RECEIPT_RESULT(7, 7),
    /**
     * <code>TXN_STATUS_RESULT = 8;</code>
     *
     * <pre>
     *&#47; Result Event for transaction status api
     * </pre>
     */
    TXN_STATUS_RESULT(8, 8),
    /**
     * <code>CHANGE_PASSWORD_RESULT = 9;</code>
     *
     * <pre>
     *&#47; Result Event for change password api
     * </pre>
     */
    CHANGE_PASSWORD_RESULT(9, 9),
    /**
     * <code>TXN_DETAILS_RESULT = 10;</code>
     *
     * <pre>
     *&#47; Result Event for transaction details result api
     * </pre>
     */
    TXN_DETAILS_RESULT(10, 10),
    /**
     * <code>API_PROGRESS = 11;</code>
     *
     * <pre>
     *&#47; Event indicating the progress of API
     * </pre>
     */
    API_PROGRESS(11, 11),
    /**
     * <code>API_NOTIFICATION = 12;</code>
     *
     * <pre>
     *&#47; Event indicating the notification to user while api is in progress
     * </pre>
     */
    API_NOTIFICATION(12, 12),
    /**
     * <code>EXIT_RESULT = 99;</code>
     *
     * <pre>
     *&#47;Event indicating exit from the library
     * </pre>
     */
    EXIT_RESULT(13, 99),
    ;

    /**
     * <code>LOGIN_RESULT = 0;</code>
     *
     * <pre>
     *&#47; Result Event for login api
     * </pre>
     */
    public static final int LOGIN_RESULT_VALUE = 0;
    /**
     * <code>LOGOUT_RESULT = 1;</code>
     *
     * <pre>
     *&#47; Result Event for logout api
     * </pre>
     */
    public static final int LOGOUT_RESULT_VALUE = 1;
    /**
     * <code>TXN_RESULT = 2;</code>
     *
     * <pre>
     *&#47; Result Event for transaction api
     * </pre>
     */
    public static final int TXN_RESULT_VALUE = 2;
    /**
     * <code>PREPARE_DEVICE_RESULT = 3;</code>
     *
     * <pre>
     *&#47; Result Event for prepare device api
     * </pre>
     */
    public static final int PREPARE_DEVICE_RESULT_VALUE = 3;
    /**
     * <code>ATTACH_SIGNATURE_RESULT = 4;</code>
     *
     * <pre>
     *&#47; Result Event for attach signature api
     * </pre>
     */
    public static final int ATTACH_SIGNATURE_RESULT_VALUE = 4;
    /**
     * <code>TXN_HISTORY_RESULT = 5;</code>
     *
     * <pre>
     *&#47; Result Event for transaction history api
     * </pre>
     */
    public static final int TXN_HISTORY_RESULT_VALUE = 5;
    /**
     * <code>VOID_TXN_RESULT = 6;</code>
     *
     * <pre>
     *&#47; Result Event for void transaction api
     * </pre>
     */
    public static final int VOID_TXN_RESULT_VALUE = 6;
    /**
     * <code>FORWARD_RECEIPT_RESULT = 7;</code>
     *
     * <pre>
     *&#47; Result Event for forward receipt api
     * </pre>
     */
    public static final int FORWARD_RECEIPT_RESULT_VALUE = 7;
    /**
     * <code>TXN_STATUS_RESULT = 8;</code>
     *
     * <pre>
     *&#47; Result Event for transaction status api
     * </pre>
     */
    public static final int TXN_STATUS_RESULT_VALUE = 8;
    /**
     * <code>CHANGE_PASSWORD_RESULT = 9;</code>
     *
     * <pre>
     *&#47; Result Event for change password api
     * </pre>
     */
    public static final int CHANGE_PASSWORD_RESULT_VALUE = 9;
    /**
     * <code>TXN_DETAILS_RESULT = 10;</code>
     *
     * <pre>
     *&#47; Result Event for transaction details result api
     * </pre>
     */
    public static final int TXN_DETAILS_RESULT_VALUE = 10;
    /**
     * <code>API_PROGRESS = 11;</code>
     *
     * <pre>
     *&#47; Event indicating the progress of API
     * </pre>
     */
    public static final int API_PROGRESS_VALUE = 11;
    /**
     * <code>API_NOTIFICATION = 12;</code>
     *
     * <pre>
     *&#47; Event indicating the notification to user while api is in progress
     * </pre>
     */
    public static final int API_NOTIFICATION_VALUE = 12;
    /**
     * <code>EXIT_RESULT = 99;</code>
     *
     * <pre>
     *&#47;Event indicating exit from the library
     * </pre>
     */
    public static final int EXIT_RESULT_VALUE = 99;


    public final int getNumber() { return value; }

    public static EventType valueOf(int value) {
      switch (value) {
        case 0: return LOGIN_RESULT;
        case 1: return LOGOUT_RESULT;
        case 2: return TXN_RESULT;
        case 3: return PREPARE_DEVICE_RESULT;
        case 4: return ATTACH_SIGNATURE_RESULT;
        case 5: return TXN_HISTORY_RESULT;
        case 6: return VOID_TXN_RESULT;
        case 7: return FORWARD_RECEIPT_RESULT;
        case 8: return TXN_STATUS_RESULT;
        case 9: return CHANGE_PASSWORD_RESULT;
        case 10: return TXN_DETAILS_RESULT;
        case 11: return API_PROGRESS;
        case 12: return API_NOTIFICATION;
        case 99: return EXIT_RESULT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<EventType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<EventType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
            public EventType findValueByNumber(int number) {
              return EventType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eze.ezecli.ApiOutput.getDescriptor().getEnumTypes().get(1);
    }

    private static final EventType[] VALUES = values();

    public static EventType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private EventType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ezecli.ApiOutput.EventType)
  }

  /**
   * Protobuf enum {@code ezecli.ApiOutput.NotificationType}
   *
   * <pre>
   **
   * NotificationType
   * </pre>
   */
  public enum NotificationType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>EPIC_IDENTIFYING_DEVICE = 1;</code>
     *
     * <pre>
     *&#47; Identifying the device connected 
     * </pre>
     */
    EPIC_IDENTIFYING_DEVICE(0, 1),
    /**
     * <code>EPIC_VALIDATING_DEVICE = 2;</code>
     *
     * <pre>
     *&#47; Validating device session with server 
     * </pre>
     */
    EPIC_VALIDATING_DEVICE(1, 2),
    /**
     * <code>EPIC_PREPARING_DEVICE = 3;</code>
     *
     * <pre>
     *&#47; Preparing device 
     * </pre>
     */
    EPIC_PREPARING_DEVICE(2, 3),
    /**
     * <code>EPIC_PREPARING_FOR_TXN = 4;</code>
     *
     * <pre>
     *&#47; Preparing device for transaction 
     * </pre>
     */
    EPIC_PREPARING_FOR_TXN(3, 4),
    /**
     * <code>EPIC_SWIPE_OR_INSERT_CARD = 5;</code>
     *
     * <pre>
     *&#47; Indication to user to Swipe or Insert Card 
     * </pre>
     */
    EPIC_SWIPE_OR_INSERT_CARD(4, 5),
    /**
     * <code>EPIC_READING_DATA = 6;</code>
     *
     * <pre>
     *&#47; Reading data from device 
     * </pre>
     */
    EPIC_READING_DATA(5, 6),
    /**
     * <code>EPIC_TXN_IN_PROGRESS = 7;</code>
     *
     * <pre>
     *&#47; Transaction is in progress 
     * </pre>
     */
    EPIC_TXN_IN_PROGRESS(6, 7),
    /**
     * <code>EPIC_ENTER_PIN = 8;</code>
     *
     * <pre>
     *&#47; Indication to user to Enter pin 
     * </pre>
     */
    EPIC_ENTER_PIN(7, 8),
    /**
     * <code>EPIC_PIN_ENTERED = 9;</code>
     *
     * <pre>
     *&#47; Indication to user that pin is entered 
     * </pre>
     */
    EPIC_PIN_ENTERED(8, 9),
    /**
     * <code>EPIC_SERVER_AUTH_IN_PROGRESS = 10;</code>
     *
     * <pre>
     *&#47; Authorization by server is in progress 
     * </pre>
     */
    EPIC_SERVER_AUTH_IN_PROGRESS(9, 10),
    /**
     * <code>EPIC_DEVICE_AUTH_IN_PROGRESS = 11;</code>
     *
     * <pre>
     *&#47; Authorization by device is in progress 
     * </pre>
     */
    EPIC_DEVICE_AUTH_IN_PROGRESS(10, 11),
    /**
     * <code>EPIC_TXN_TERMINATED = 12;</code>
     *
     * <pre>
     *&#47; Transaction Terminated 
     * </pre>
     */
    EPIC_TXN_TERMINATED(11, 12),
    /**
     * <code>EPIC_TXN_NOT_ACCEPTED = 13;</code>
     *
     * <pre>
     *&#47; Transaction not Accepted 
     * </pre>
     */
    EPIC_TXN_NOT_ACCEPTED(12, 13),
    /**
     * <code>EPIC_UNSUPPORTED_CARD = 14;</code>
     *
     * <pre>
     *&#47; Unsupported card 
     * </pre>
     */
    EPIC_UNSUPPORTED_CARD(13, 14),
    /**
     * <code>EPIC_CARD_NOT_SUPPORTED = 15;</code>
     *
     * <pre>
     *&#47; Card is not supported 
     * </pre>
     */
    EPIC_CARD_NOT_SUPPORTED(14, 15),
    /**
     * <code>EPIC_CARD_BLOCKED = 16;</code>
     *
     * <pre>
     *&#47; Card is blocked 
     * </pre>
     */
    EPIC_CARD_BLOCKED(15, 16),
    /**
     * <code>EPIC_CHIP_NOT_READ = 17;</code>
     *
     * <pre>
     *&#47; Chip cannot be read; indicate user to swipe the card 
     * </pre>
     */
    EPIC_CHIP_NOT_READ(16, 17),
    /**
     * <code>EPIC_USE_CHIP_CARD = 18;</code>
     *
     * <pre>
     *&#47; Indicate the user to use chip card reader 
     * </pre>
     */
    EPIC_USE_CHIP_CARD(17, 18),
    /**
     * <code>EPIC_WRONG_PIN = 19;</code>
     *
     * <pre>
     *&#47; Wrong pin is entered 
     * </pre>
     */
    EPIC_WRONG_PIN(18, 19),
    /**
     * <code>EPIC_PIN_METHOD_BLOCKED = 20;</code>
     *
     * <pre>
     *&#47; Pin method is blocked 
     * </pre>
     */
    EPIC_PIN_METHOD_BLOCKED(19, 20),
    /**
     * <code>EPIC_EXPIRED_APP = 21;</code>
     *
     * <pre>
     *&#47; Application is expired 
     * </pre>
     */
    EPIC_EXPIRED_APP(20, 21),
    ;

    /**
     * <code>EPIC_IDENTIFYING_DEVICE = 1;</code>
     *
     * <pre>
     *&#47; Identifying the device connected 
     * </pre>
     */
    public static final int EPIC_IDENTIFYING_DEVICE_VALUE = 1;
    /**
     * <code>EPIC_VALIDATING_DEVICE = 2;</code>
     *
     * <pre>
     *&#47; Validating device session with server 
     * </pre>
     */
    public static final int EPIC_VALIDATING_DEVICE_VALUE = 2;
    /**
     * <code>EPIC_PREPARING_DEVICE = 3;</code>
     *
     * <pre>
     *&#47; Preparing device 
     * </pre>
     */
    public static final int EPIC_PREPARING_DEVICE_VALUE = 3;
    /**
     * <code>EPIC_PREPARING_FOR_TXN = 4;</code>
     *
     * <pre>
     *&#47; Preparing device for transaction 
     * </pre>
     */
    public static final int EPIC_PREPARING_FOR_TXN_VALUE = 4;
    /**
     * <code>EPIC_SWIPE_OR_INSERT_CARD = 5;</code>
     *
     * <pre>
     *&#47; Indication to user to Swipe or Insert Card 
     * </pre>
     */
    public static final int EPIC_SWIPE_OR_INSERT_CARD_VALUE = 5;
    /**
     * <code>EPIC_READING_DATA = 6;</code>
     *
     * <pre>
     *&#47; Reading data from device 
     * </pre>
     */
    public static final int EPIC_READING_DATA_VALUE = 6;
    /**
     * <code>EPIC_TXN_IN_PROGRESS = 7;</code>
     *
     * <pre>
     *&#47; Transaction is in progress 
     * </pre>
     */
    public static final int EPIC_TXN_IN_PROGRESS_VALUE = 7;
    /**
     * <code>EPIC_ENTER_PIN = 8;</code>
     *
     * <pre>
     *&#47; Indication to user to Enter pin 
     * </pre>
     */
    public static final int EPIC_ENTER_PIN_VALUE = 8;
    /**
     * <code>EPIC_PIN_ENTERED = 9;</code>
     *
     * <pre>
     *&#47; Indication to user that pin is entered 
     * </pre>
     */
    public static final int EPIC_PIN_ENTERED_VALUE = 9;
    /**
     * <code>EPIC_SERVER_AUTH_IN_PROGRESS = 10;</code>
     *
     * <pre>
     *&#47; Authorization by server is in progress 
     * </pre>
     */
    public static final int EPIC_SERVER_AUTH_IN_PROGRESS_VALUE = 10;
    /**
     * <code>EPIC_DEVICE_AUTH_IN_PROGRESS = 11;</code>
     *
     * <pre>
     *&#47; Authorization by device is in progress 
     * </pre>
     */
    public static final int EPIC_DEVICE_AUTH_IN_PROGRESS_VALUE = 11;
    /**
     * <code>EPIC_TXN_TERMINATED = 12;</code>
     *
     * <pre>
     *&#47; Transaction Terminated 
     * </pre>
     */
    public static final int EPIC_TXN_TERMINATED_VALUE = 12;
    /**
     * <code>EPIC_TXN_NOT_ACCEPTED = 13;</code>
     *
     * <pre>
     *&#47; Transaction not Accepted 
     * </pre>
     */
    public static final int EPIC_TXN_NOT_ACCEPTED_VALUE = 13;
    /**
     * <code>EPIC_UNSUPPORTED_CARD = 14;</code>
     *
     * <pre>
     *&#47; Unsupported card 
     * </pre>
     */
    public static final int EPIC_UNSUPPORTED_CARD_VALUE = 14;
    /**
     * <code>EPIC_CARD_NOT_SUPPORTED = 15;</code>
     *
     * <pre>
     *&#47; Card is not supported 
     * </pre>
     */
    public static final int EPIC_CARD_NOT_SUPPORTED_VALUE = 15;
    /**
     * <code>EPIC_CARD_BLOCKED = 16;</code>
     *
     * <pre>
     *&#47; Card is blocked 
     * </pre>
     */
    public static final int EPIC_CARD_BLOCKED_VALUE = 16;
    /**
     * <code>EPIC_CHIP_NOT_READ = 17;</code>
     *
     * <pre>
     *&#47; Chip cannot be read; indicate user to swipe the card 
     * </pre>
     */
    public static final int EPIC_CHIP_NOT_READ_VALUE = 17;
    /**
     * <code>EPIC_USE_CHIP_CARD = 18;</code>
     *
     * <pre>
     *&#47; Indicate the user to use chip card reader 
     * </pre>
     */
    public static final int EPIC_USE_CHIP_CARD_VALUE = 18;
    /**
     * <code>EPIC_WRONG_PIN = 19;</code>
     *
     * <pre>
     *&#47; Wrong pin is entered 
     * </pre>
     */
    public static final int EPIC_WRONG_PIN_VALUE = 19;
    /**
     * <code>EPIC_PIN_METHOD_BLOCKED = 20;</code>
     *
     * <pre>
     *&#47; Pin method is blocked 
     * </pre>
     */
    public static final int EPIC_PIN_METHOD_BLOCKED_VALUE = 20;
    /**
     * <code>EPIC_EXPIRED_APP = 21;</code>
     *
     * <pre>
     *&#47; Application is expired 
     * </pre>
     */
    public static final int EPIC_EXPIRED_APP_VALUE = 21;


    public final int getNumber() { return value; }

    public static NotificationType valueOf(int value) {
      switch (value) {
        case 1: return EPIC_IDENTIFYING_DEVICE;
        case 2: return EPIC_VALIDATING_DEVICE;
        case 3: return EPIC_PREPARING_DEVICE;
        case 4: return EPIC_PREPARING_FOR_TXN;
        case 5: return EPIC_SWIPE_OR_INSERT_CARD;
        case 6: return EPIC_READING_DATA;
        case 7: return EPIC_TXN_IN_PROGRESS;
        case 8: return EPIC_ENTER_PIN;
        case 9: return EPIC_PIN_ENTERED;
        case 10: return EPIC_SERVER_AUTH_IN_PROGRESS;
        case 11: return EPIC_DEVICE_AUTH_IN_PROGRESS;
        case 12: return EPIC_TXN_TERMINATED;
        case 13: return EPIC_TXN_NOT_ACCEPTED;
        case 14: return EPIC_UNSUPPORTED_CARD;
        case 15: return EPIC_CARD_NOT_SUPPORTED;
        case 16: return EPIC_CARD_BLOCKED;
        case 17: return EPIC_CHIP_NOT_READ;
        case 18: return EPIC_USE_CHIP_CARD;
        case 19: return EPIC_WRONG_PIN;
        case 20: return EPIC_PIN_METHOD_BLOCKED;
        case 21: return EPIC_EXPIRED_APP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<NotificationType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<NotificationType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<NotificationType>() {
            public NotificationType findValueByNumber(int number) {
              return NotificationType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.eze.ezecli.ApiOutput.getDescriptor().getEnumTypes().get(2);
    }

    private static final NotificationType[] VALUES = values();

    public static NotificationType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private NotificationType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ezecli.ApiOutput.NotificationType)
  }

  private int bitField0_;
  public static final int EVENTTYPE_FIELD_NUMBER = 1;
  private com.eze.ezecli.ApiOutput.EventType eventType_;
  /**
   * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
   *
   * <pre>
   *&#47; Event type
   * </pre>
   */
  public boolean hasEventType() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
   *
   * <pre>
   *&#47; Event type
   * </pre>
   */
  public com.eze.ezecli.ApiOutput.EventType getEventType() {
    return eventType_;
  }

  public static final int STATUS_FIELD_NUMBER = 2;
  private com.eze.ezecli.ApiOutput.ResultStatus status_;
  /**
   * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
   *
   * <pre>
   *&#47; Status of the result; 0 - Success; 1 - Failure
   * </pre>
   */
  public boolean hasStatus() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
   *
   * <pre>
   *&#47; Status of the result; 0 - Success; 1 - Failure
   * </pre>
   */
  public com.eze.ezecli.ApiOutput.ResultStatus getStatus() {
    return status_;
  }

  public static final int MSGTEXT_FIELD_NUMBER = 3;
  private java.lang.Object msgText_;
  /**
   * <code>optional string msgText = 3;</code>
   *
   * <pre>
   *&#47; Text message associated with the event
   * </pre>
   */
  public boolean hasMsgText() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional string msgText = 3;</code>
   *
   * <pre>
   *&#47; Text message associated with the event
   * </pre>
   */
  public java.lang.String getMsgText() {
    java.lang.Object ref = msgText_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        msgText_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string msgText = 3;</code>
   *
   * <pre>
   *&#47; Text message associated with the event
   * </pre>
   */
  public com.google.protobuf.ByteString
      getMsgTextBytes() {
    java.lang.Object ref = msgText_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      msgText_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int OUTDATA_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString outData_;
  /**
   * <code>optional bytes outData = 4;</code>
   *
   * <pre>
   *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
   * </pre>
   */
  public boolean hasOutData() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional bytes outData = 4;</code>
   *
   * <pre>
   *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
   * </pre>
   */
  public com.google.protobuf.ByteString getOutData() {
    return outData_;
  }

  public static final int NOTIFICATION_FIELD_NUMBER = 5;
  private com.eze.ezecli.ApiOutput.NotificationType notification_;
  /**
   * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
   *
   * <pre>
   *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
   * </pre>
   */
  public boolean hasNotification() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
   *
   * <pre>
   *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
   * </pre>
   */
  public com.eze.ezecli.ApiOutput.NotificationType getNotification() {
    return notification_;
  }

  private void initFields() {
    eventType_ = com.eze.ezecli.ApiOutput.EventType.LOGIN_RESULT;
    status_ = com.eze.ezecli.ApiOutput.ResultStatus.SUCCESS;
    msgText_ = "";
    outData_ = com.google.protobuf.ByteString.EMPTY;
    notification_ = com.eze.ezecli.ApiOutput.NotificationType.EPIC_IDENTIFYING_DEVICE;
  }
  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    if (!hasEventType()) {
      memoizedIsInitialized = 0;
      return false;
    }
    if (!hasStatus()) {
      memoizedIsInitialized = 0;
      return false;
    }
    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, eventType_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, status_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBytes(3, getMsgTextBytes());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBytes(4, outData_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeEnum(5, notification_.getNumber());
    }
    getUnknownFields().writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, eventType_.getNumber());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, status_.getNumber());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, getMsgTextBytes());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, outData_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, notification_.getNumber());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  protected java.lang.Object writeReplace()
      throws java.io.ObjectStreamException {
    return super.writeReplace();
  }

  public static com.eze.ezecli.ApiOutput parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.eze.ezecli.ApiOutput parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.eze.ezecli.ApiOutput parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.eze.ezecli.ApiOutput parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public static Builder newBuilder() { return Builder.create(); }
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder(com.eze.ezecli.ApiOutput prototype) {
    return newBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() { return newBuilder(this); }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code ezecli.ApiOutput}
   *
   * <pre>
   **
   * ApiOutput is a message representing the API output from the ezecli app
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:ezecli.ApiOutput)
      com.eze.ezecli.ApiOutputOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_ApiOutput_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_ApiOutput_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eze.ezecli.ApiOutput.class, com.eze.ezecli.ApiOutput.Builder.class);
    }

    // Construct using com.eze.ezecli.ApiOutput.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    private static Builder create() {
      return new Builder();
    }

    public Builder clear() {
      super.clear();
      eventType_ = com.eze.ezecli.ApiOutput.EventType.LOGIN_RESULT;
      bitField0_ = (bitField0_ & ~0x00000001);
      status_ = com.eze.ezecli.ApiOutput.ResultStatus.SUCCESS;
      bitField0_ = (bitField0_ & ~0x00000002);
      msgText_ = "";
      bitField0_ = (bitField0_ & ~0x00000004);
      outData_ = com.google.protobuf.ByteString.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      notification_ = com.eze.ezecli.ApiOutput.NotificationType.EPIC_IDENTIFYING_DEVICE;
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    public Builder clone() {
      return create().mergeFrom(buildPartial());
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.eze.ezecli.Ezetap.internal_static_ezecli_ApiOutput_descriptor;
    }

    public com.eze.ezecli.ApiOutput getDefaultInstanceForType() {
      return com.eze.ezecli.ApiOutput.getDefaultInstance();
    }

    public com.eze.ezecli.ApiOutput build() {
      com.eze.ezecli.ApiOutput result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.eze.ezecli.ApiOutput buildPartial() {
      com.eze.ezecli.ApiOutput result = new com.eze.ezecli.ApiOutput(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.eventType_ = eventType_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.status_ = status_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.msgText_ = msgText_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.outData_ = outData_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.notification_ = notification_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.eze.ezecli.ApiOutput) {
        return mergeFrom((com.eze.ezecli.ApiOutput)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.eze.ezecli.ApiOutput other) {
      if (other == com.eze.ezecli.ApiOutput.getDefaultInstance()) return this;
      if (other.hasEventType()) {
        setEventType(other.getEventType());
      }
      if (other.hasStatus()) {
        setStatus(other.getStatus());
      }
      if (other.hasMsgText()) {
        bitField0_ |= 0x00000004;
        msgText_ = other.msgText_;
        onChanged();
      }
      if (other.hasOutData()) {
        setOutData(other.getOutData());
      }
      if (other.hasNotification()) {
        setNotification(other.getNotification());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      return this;
    }

    public final boolean isInitialized() {
      if (!hasEventType()) {
        
        return false;
      }
      if (!hasStatus()) {
        
        return false;
      }
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.eze.ezecli.ApiOutput parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.eze.ezecli.ApiOutput) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.eze.ezecli.ApiOutput.EventType eventType_ = com.eze.ezecli.ApiOutput.EventType.LOGIN_RESULT;
    /**
     * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
     *
     * <pre>
     *&#47; Event type
     * </pre>
     */
    public boolean hasEventType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
     *
     * <pre>
     *&#47; Event type
     * </pre>
     */
    public com.eze.ezecli.ApiOutput.EventType getEventType() {
      return eventType_;
    }
    /**
     * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
     *
     * <pre>
     *&#47; Event type
     * </pre>
     */
    public Builder setEventType(com.eze.ezecli.ApiOutput.EventType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      eventType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required .ezecli.ApiOutput.EventType eventType = 1;</code>
     *
     * <pre>
     *&#47; Event type
     * </pre>
     */
    public Builder clearEventType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      eventType_ = com.eze.ezecli.ApiOutput.EventType.LOGIN_RESULT;
      onChanged();
      return this;
    }

    private com.eze.ezecli.ApiOutput.ResultStatus status_ = com.eze.ezecli.ApiOutput.ResultStatus.SUCCESS;
    /**
     * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
     *
     * <pre>
     *&#47; Status of the result; 0 - Success; 1 - Failure
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
     *
     * <pre>
     *&#47; Status of the result; 0 - Success; 1 - Failure
     * </pre>
     */
    public com.eze.ezecli.ApiOutput.ResultStatus getStatus() {
      return status_;
    }
    /**
     * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
     *
     * <pre>
     *&#47; Status of the result; 0 - Success; 1 - Failure
     * </pre>
     */
    public Builder setStatus(com.eze.ezecli.ApiOutput.ResultStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      status_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>required .ezecli.ApiOutput.ResultStatus status = 2;</code>
     *
     * <pre>
     *&#47; Status of the result; 0 - Success; 1 - Failure
     * </pre>
     */
    public Builder clearStatus() {
      bitField0_ = (bitField0_ & ~0x00000002);
      status_ = com.eze.ezecli.ApiOutput.ResultStatus.SUCCESS;
      onChanged();
      return this;
    }

    private java.lang.Object msgText_ = "";
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public boolean hasMsgText() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public java.lang.String getMsgText() {
      java.lang.Object ref = msgText_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          msgText_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public com.google.protobuf.ByteString
        getMsgTextBytes() {
      java.lang.Object ref = msgText_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        msgText_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public Builder setMsgText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      msgText_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public Builder clearMsgText() {
      bitField0_ = (bitField0_ & ~0x00000004);
      msgText_ = getDefaultInstance().getMsgText();
      onChanged();
      return this;
    }
    /**
     * <code>optional string msgText = 3;</code>
     *
     * <pre>
     *&#47; Text message associated with the event
     * </pre>
     */
    public Builder setMsgTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      msgText_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString outData_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>optional bytes outData = 4;</code>
     *
     * <pre>
     *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
     * </pre>
     */
    public boolean hasOutData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes outData = 4;</code>
     *
     * <pre>
     *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
     * </pre>
     */
    public com.google.protobuf.ByteString getOutData() {
      return outData_;
    }
    /**
     * <code>optional bytes outData = 4;</code>
     *
     * <pre>
     *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
     * </pre>
     */
    public Builder setOutData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      outData_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bytes outData = 4;</code>
     *
     * <pre>
     *&#47; packed output data of the API; On Failure, it is the packed data of StatusInfo. On Success, it would correspond to the respective Output Message or will be NULL. In progress, it is the packed data of ProgressInfo
     * </pre>
     */
    public Builder clearOutData() {
      bitField0_ = (bitField0_ & ~0x00000008);
      outData_ = getDefaultInstance().getOutData();
      onChanged();
      return this;
    }

    private com.eze.ezecli.ApiOutput.NotificationType notification_ = com.eze.ezecli.ApiOutput.NotificationType.EPIC_IDENTIFYING_DEVICE;
    /**
     * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
     *
     * <pre>
     *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
     * </pre>
     */
    public boolean hasNotification() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
     *
     * <pre>
     *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
     * </pre>
     */
    public com.eze.ezecli.ApiOutput.NotificationType getNotification() {
      return notification_;
    }
    /**
     * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
     *
     * <pre>
     *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
     * </pre>
     */
    public Builder setNotification(com.eze.ezecli.ApiOutput.NotificationType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000010;
      notification_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional .ezecli.ApiOutput.NotificationType notification = 5;</code>
     *
     * <pre>
     *&#47; Notification Type; applicable only when eventType is API_NOTIFICATION
     * </pre>
     */
    public Builder clearNotification() {
      bitField0_ = (bitField0_ & ~0x00000010);
      notification_ = com.eze.ezecli.ApiOutput.NotificationType.EPIC_IDENTIFYING_DEVICE;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:ezecli.ApiOutput)
  }

  static {
    defaultInstance = new ApiOutput(true);
    defaultInstance.initFields();
  }

  // @@protoc_insertion_point(class_scope:ezecli.ApiOutput)
}

